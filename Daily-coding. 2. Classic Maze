package stack;

import java.io.File;
import java.util.Scanner;

public class Mase{

    public static void main(String[] args) throws Exception{
        File file = new File("data/input");
        Scanner scan = new Scanner(file);
        int n = scan.nextInt();
        int m = scan.nextInt();
        int[][] map = new int[n][m];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                map[i][j] = scan.nextInt();
            }
        }
        boolean[][] visit = new boolean[n][m];
        int origin_x = scan.nextInt();
        int origin_y = scan.nextInt();
        int dest_x = scan.nextInt();
        int dest_y = scan.nextInt();
        scan.close();
        SeqStack2 stack = new SeqStack2();
        visit[origin_x][origin_y] = true;
        stack.push(new SeqStack2.Coordinate(origin_x, origin_y));
        while(stack.is_empty() == false){
            SeqStack2.Coordinate cord = stack.get_top();
            if(cord.x == dest_x && cord.y == dest_y){
                break;
            }
            if(cord.direction >= 3){
                visit[cord.x][cord.y] = false;
                stack.pop();
                continue;
            }
            if(cord.direction == -1){
                if(cord.y + 1 < m  && visit[cord.x][cord.y + 1] == false && map[cord.x][cord.y + 1] == 0){
                    visit[cord.x][cord.y + 1] = true;
                    stack.push(new SeqStack2.Coordinate(cord.x, cord.y + 1));
                }
            }
            else if(cord.direction == 0){
                if(cord.x - 1 >= 0 && visit[cord.x - 1][cord.y] == false && map[cord.x - 1][cord.y] == 0){
                    visit[cord.x - 1][cord.y] = true;
                    stack.push(new SeqStack2.Coordinate(cord.x - 1, cord.y));
                }
            }
            else if(cord.direction == 1){
                if(cord.y - 1 >= 0 && visit[cord.x][cord.y - 1] == false && map[cord.x][cord.y - 1] == 0){
                    visit[cord.x][cord.y - 1] = true;
                    stack.push(new SeqStack2.Coordinate(cord.x, cord.y - 1));
                }
            }
            else if(cord.direction == 2){
                if(cord.x + 1 < n && visit[cord.x + 1][cord.y] == false && map[cord.x + 1][cord.y] == 0){
                    visit[cord.x + 1][cord.y] = true;
                    stack.push(new SeqStack2.Coordinate(cord.x + 1, cord.y));
                }
            }
            cord.direction ++;
        }
        if(stack.is_empty()){
            System.out.println("没有找到从起点到终点的路径");
        }
        else{
            String str = "";
            while(stack.is_empty() == false){
                str = stack.pop() + " " + str;
            }
            System.out.println(str);
        }
    }
}


package Stack;

public class SeqStack2{

    public static class Coordinate{

        public int x;

        public int y;

        /**
         * -1: no
         * 0: right
         * 1: right. up
         * 2: right, up, left
         * 3: all
         */
        public int direction = -1;

        public Coordinate(int x, int y){
            this.x = x;
            this.y = y;
        }
    }


    public final int INITIAL_STACK_SIZE = 100;

    public Coordinate[] base;

    public int top;

    public SeqStack2(){
        base = new Coordinate[INITIAL_STACK_SIZE];
        top = 0;
    }

    public void clear(){
        top = 0;
    }

    public boolean is_empty(){
        if(top == 0){
            return true;
        }
        else{
            return false;
        }
    }

    public int size(){
        return top;
    }

    public Coordinate get_top() throws Exception{
        if(top == 0){
            throw new Exception("get_top错误：空栈");
        }
        return base[top - 1];
    }

    public void push(Coordinate a) throws Exception{
        if(top == base.length){
            throw new Exception("push错误：栈满");
        }
        base[top ++] = a;
    }

    public Coordinate pop() throws Exception{
        if(top == 0){
            throw new Exception("pop错误：空栈");
        }
        top --;
        return base[top];
    }

    @Override
    public String toString(){
        String str = "";
        for(int i = 0; i < top; i++){
            str += "(" + base[i].x + base[i].y + ") ";
        }
        return str;
    }
}
