/*
给你一个由 '('、')' 和小写字母组成的字符串 s。

你需要从字符串中删除最少数目的 '(' 或者 ')' （可以删除任意位置的括号)，使得剩下的「括号字符串」有效。

请返回任意一个合法字符串。

有效「括号字符串」应当符合以下 任意一条 要求：

空字符串或只包含小写字母的字符串
可以被写作 AB（A 连接 B）的字符串，其中 A 和 B 都是有效「括号字符串」
可以被写作 (A) 的字符串，其中 A 是一个有效的「括号字符串」
*/

/*
Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/minimum-remove-to-make-valid-parentheses
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

Java.Version1:

class Solution {
    public String minRemoveToMakeValid(String s) {
        Stack <Integer> stack = new Stack<>();
        boolean[] judge = new boolean[s.length()];
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < s.length(); i++){
            if(s.charAt(i) == '('){
                stack.push(i);
                judge[i] = true;
            }
            else {
                if(s.charAt(i) == ')'&&!stack.isEmpty()){
                    judge[stack.peek()] = false;
                    stack.pop();
                    judge[i] = false;
                }
                else if(s.charAt(i) == ')'){
                    judge[i] = true;
                }
            }
        }
        for(int i = 0; i <s.length(); i++){
            if(!judge[i]){
                sb.append(s.charAt(i));
            }
        }
        return sb.toString();
    }
}
